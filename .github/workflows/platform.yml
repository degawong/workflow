name: platform

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  environment:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}    
    steps:
    - name: infomation
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
  gcc:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: apt update
      run: sudo apt-get update
    
    - name: create build environment
      run: |
        sudo apt-get install gcc-multilib g++-multilib
        cmake -E make_directory ${{runner.workspace}}/x32
        cmake -E make_directory ${{runner.workspace}}/x64
    
    - name: config x32
      env:
        CC: gcc
        CXX: g++
        CXXFLAGS: -m32
      shell: bash
      working-directory: ${{runner.workspace}}/x32
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    
    - name: build x32
      working-directory: ${{runner.workspace}}/x32
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: config x64
      env:
        CC: gcc
        CXX: g++
        CXXFLAGS: -m64
      shell: bash
      working-directory: ${{runner.workspace}}/x64
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    
    - name: build x64
      working-directory: ${{runner.workspace}}/x64
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j 2

  clang:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: apt update
      run: sudo apt-get update
    
    - name: create build environment
      run: |
        sudo apt-get install gcc-multilib g++-multilib
        cmake -E make_directory ${{runner.workspace}}/x32
        cmake -E make_directory ${{runner.workspace}}/x64
    
    - name: config x32
      env:
        CC: clang
        CXX: clang++
        CXXFLAGS: -m32
      shell: bash
      working-directory: ${{runner.workspace}}/x32
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    
    - name: build x32
      working-directory: ${{runner.workspace}}/x32
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: config x64
      env:
        CC: clang
        CXX: clang++
        CXXFLAGS: -m64
      shell: bash
      working-directory: ${{runner.workspace}}/x64
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
    
    - name: build x64
      working-directory: ${{runner.workspace}}/x64
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j 2

  android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake
    - name: arm32
      run: |
        mkdir build-armv7 && cd build-armv7
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 ..
        cmake --build . -j 2
    - name: arm64
      run: |
        mkdir build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_HOME/ndk-bundle/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release \
            -DANDROID_ABI="arm64-v8a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-21 ..        
        cmake --build . -j 2
        
  windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: create build environment
      run: |
        cmake -E make_directory ${{runner.workspace}}/msvc      
    
    - name: build-x86
      run: |
        mkdir build-x86; cd build-x86
        cmake -T v142,host=x64 -A Win32 ..
        cmake --build . --config Release -j 2
    - name: build-x64
      run: |
        mkdir build-x64; cd build-x64
        cmake ..
        cmake --build . --config Release -j 2
      